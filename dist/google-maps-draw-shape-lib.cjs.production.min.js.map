{"version":3,"file":"google-maps-draw-shape-lib.cjs.production.min.js","sources":["../src/MapDrawShape/Overlays/CustomOverlayView.js","../src/MapDrawShape/Map/MapHelper.js","../src/MapDrawShape/Geometry/JstsHelper.js","../src/MapDrawShape/MapDrawShapeManager.js"],"sourcesContent":["export default class CustomOverlayView {\n  /**\n   * @param {string} content String with the inner HTML of the overlay\n   * @param {google.maps.LatLng} position Google LatLng object with the position of the overlay on the map\n   * @param {Function} callback Funcion to be called when click in the overlay\n   */\n  constructor(content, position, callback) {\n    this.content = content;\n    this.position = position;\n    this.callback = callback;\n\n    // Typescript ReferenceError: google is not defined\n    // It is not possible to directly extend a google.maps.* class since it actually isn't available\n    this.extend(CustomOverlayView, google.maps.OverlayView);\n  }\n\n  onAdd = () => {\n    this.div = document.createElement('div');\n    this.div.style.cssText = 'position: absolute; transform: translate(-50%, -50%);';\n    this.div.innerHTML = this.content;\n\n    if (this.callback) {\n      google.maps.event.addDomListener(this.div, 'click', this.callback);\n    }\n\n    this.getPanes().floatPane.appendChild(this.div);\n  };\n\n  onRemove = () => {\n    if (this.div) {\n      google.maps.event.clearInstanceListeners(this.div);\n\n      this.div.parentNode.removeChild(this.div);\n      delete this.div;\n    }\n  };\n\n  close = () => {\n    this.setMap(null);\n  };\n\n  draw = () => {\n    const position = this.position;\n\n    const projection = this.getProjection();\n\n    if (!position || !projection) {\n      return;\n    }\n\n    const point = projection.fromLatLngToDivPixel(position);\n\n    if (this.div) {\n      this.div.style.top = point.y + 'px';\n      this.div.style.left = point.x + 'px';\n    }\n  };\n\n  show = (map) => {\n    this.setMap(map);\n\n    this.draw();\n  };\n\n  remove = () => {\n    this.close();\n  };\n\n  extend = (type1, type2) => {\n    for (let property in type2.prototype) {\n      type1.prototype[property] = type2.prototype[property];\n    }\n  };\n}\n","export default class MapFunctions {\n  /**\n   * @param {google.maps.Map} map Google Maps JavaScript API instance\n   * @returns {number} Current zoom level of the map\n   */\n  static getZoom = (map) => {\n    return map.getZoom();\n  };\n\n  /**\n   * @param {google.maps.Map} map Google Maps JavaScript API instance\n   * @returns {any} Object with NW and SE bounds of the map\n   */\n  static getBounds = (map) => {\n    const bounds = map.getBounds();\n\n    const ne = bounds.getNorthEast();\n    const sw = bounds.getSouthWest();\n\n    return {\n      nw: { lat: ne.lat(), lng: sw.lng() },\n      se: { lat: sw.lat(), lng: ne.lng() }\n    };\n  };\n\n  /**\n   * @param {google.maps.Map} map Google Maps JavaScript API instance\n   * @param {any} point Object with clientX and clientY screen coordinates\n   * @returns {google.maps.LatLng} Object with Lat and Lng\n   */\n  static pointToLatLng = (map, point) => {\n    const clientRect = map.getDiv().getBoundingClientRect();\n\n    const clientX = point.clientX - clientRect.left;\n    const clientY = point.clientY - clientRect.top;\n\n    const projection = map.getProjection();\n    const bounds = map.getBounds();\n\n    const ne = bounds.getNorthEast();\n    const sw = bounds.getSouthWest();\n\n    const topRight = projection.fromLatLngToPoint(ne);\n    const bottomLeft = projection.fromLatLngToPoint(sw);\n\n    const zoom = MapFunctions.getZoom(map);\n    const scale = Math.pow(2, zoom);\n\n    return projection.fromPointToLatLng(new google.maps.Point(clientX / scale + bottomLeft.x, clientY / scale + topRight.y));\n  };\n\n  /**\n   * @param {google.maps.Map} map Google Maps JavaScript API instance\n   * @param {boolean} freeze Flag indicating whether it should freeze the map\n   */\n  static freezeMap = (map, freeze) => {\n    map.setOptions({\n      draggable: !freeze,\n      scrollwheel: !freeze,\n      draggableCursor: freeze ? 'pointer' : null,\n      disableDoubleClickZoom: freeze\n    });\n  };\n\n  /**\n   * @param {google.maps.Map} map Google Maps JavaScript API instance\n   * @param {boolean} enable Flag indicating whether it should enable crossair cursor over the map\n   */\n  static enableCrossair = (map, enable) => {\n    map.setOptions({\n      draggableCursor: enable ? 'crosshair' : null,\n      disableDoubleClickZoom: enable\n    });\n  };\n}\n","import * as jsts from 'jsts/dist/jsts';\n\nexport default class JstsHelper {\n  /**\n   * @param {object[]} shape Array of objects that contain lat lng values\n   * @param {bool} validate Flag indicating whether it should validate the shape\n   * @returns {object[]} Array of that contains polygons that are Lists of google.maps.LatLng objects\n   */\n  static processShape = (shape, validate) => {\n    let polygons = [];\n\n    if (shape?.length > 2) {\n      let shapePolygons = [];\n\n      let polygon = [];\n\n      let firstCoordinate = null;\n\n      for (let i = 0; i < shape.length; i++) {\n        if (!firstCoordinate) {\n          firstCoordinate = shape[i];\n\n          polygon = [];\n          polygon.push(validate ? new jsts.geom.Coordinate(shape[i].lng, shape[i].lat) : new google.maps.LatLng(shape[i].lat, shape[i].lng));\n\n          continue;\n        }\n\n        polygon.push(validate ? new jsts.geom.Coordinate(shape[i].lng, shape[i].lat) : new google.maps.LatLng(shape[i].lat, shape[i].lng));\n\n        if (firstCoordinate.lat === shape[i].lat && firstCoordinate.lng === shape[i].lng) {\n          if (polygon.length > 3) {\n            shapePolygons.push(polygon);\n          }\n\n          firstCoordinate = null;\n        } else {\n          if (i === shape.length - 1) {\n            polygon.push(polygon[0]);\n\n            if (polygon.length > 3) {\n              shapePolygons.push(polygon);\n            }\n          }\n        }\n      }\n\n      if (!validate) {\n        polygons = shapePolygons;\n      } else {\n        if (shapePolygons.length > 0) {\n          const geometryFactory = new jsts.geom.GeometryFactory();\n\n          const jstsPolygons = shapePolygons.map((item) => {\n            const shell = geometryFactory.createLinearRing(item);\n            return geometryFactory.createPolygon(shell);\n          });\n\n          const jstsPolygon = jstsPolygons.length > 1 ? geometryFactory.createMultiPolygon(jstsPolygons) : jstsPolygons[0];\n\n          const validPolygon = this.#validateGeometry(jstsPolygon);\n\n          if (validPolygon && validPolygon.getCoordinates().length) {\n            polygons = this.#convertFromJstsGeometry(validPolygon);\n          }\n        }\n      }\n    }\n\n    return polygons;\n  };\n\n  /**\n   * @param {google.maps.LatLng[]} path Array of google.maps.LatLng objects\n   * @param {number} simplifyZoom Zoom level to take into account when simplifying the shape\n   * @returns {object[]} Array of that contains polygons that are Lists of google.maps.LatLng objects\n   */\n  static processPolygon = (path, simplifyZoom) => {\n    let polygons = [];\n\n    if (path?.length > 2) {\n      const coordinates = path.map((item) => {\n        return new jsts.geom.Coordinate(item.lng(), item.lat());\n      });\n\n      if (coordinates.length > 0) {\n        coordinates.push(coordinates[0]);\n      }\n\n      const geometryFactory = new jsts.geom.GeometryFactory();\n\n      const shell = geometryFactory.createLinearRing(coordinates);\n\n      let jstsPolygon = geometryFactory.createPolygon(shell);\n\n      if (simplifyZoom) {\n        jstsPolygon = this.#simplifyPolygon(jstsPolygon, simplifyZoom);\n      }\n\n      const validPolygon = this.#validateGeometry(jstsPolygon);\n\n      if (validPolygon && validPolygon.getCoordinates().length) {\n        polygons = this.#convertFromJstsGeometry(validPolygon);\n      }\n    }\n\n    return polygons;\n  };\n\n  static #simplifyPolygon = (polygon, zoom) => {\n    let tolerance = 0.1;\n\n    switch (zoom) {\n      case 7:\n      case 8:\n      case 9: {\n        tolerance = 0.01;\n        break;\n      }\n      case 10:\n      case 11:\n      case 12:\n      case 13: {\n        tolerance = 0.001;\n        break;\n      }\n      case 14:\n      case 15:\n      case 16:\n      case 17: {\n        tolerance = 0.0001;\n        break;\n      }\n      case 18:\n      case 19:\n      case 20:\n      case 21:\n      case 22: {\n        tolerance = 0.00001;\n        break;\n      }\n      default:\n        tolerance = 0.1;\n    }\n\n    return jsts.simplify.TopologyPreservingSimplifier.simplify(polygon, tolerance);\n  };\n\n  static #convertFromJstsGeometry = (geom) => {\n    let polygons = [];\n\n    // Sets shape on clockwise order\n    geom.normalize();\n\n    if (geom instanceof jsts.geom.Polygon) {\n      const polygon = this.#convertFromJstsCoordinates(geom.getCoordinates());\n\n      polygons.push(polygon);\n    }\n\n    if (geom instanceof jsts.geom.MultiPolygon) {\n      for (let n = geom.getNumGeometries(); n > 0; n--) {\n        const polygon = this.#convertFromJstsCoordinates(geom.getGeometryN(n - 1).getCoordinates());\n\n        polygons.push(polygon);\n      }\n    }\n\n    return polygons;\n  };\n\n  static #convertFromJstsCoordinates = (coordinates) => {\n    let path = [];\n\n    if (coordinates) {\n      let lastCoordinate = null;\n\n      for (let i = 0; i < coordinates.length; i++) {\n        if (!lastCoordinate || !(lastCoordinate.x === coordinates[i].x && lastCoordinate.y === coordinates[i].y)) {\n          lastCoordinate = coordinates[i];\n\n          path.push(new google.maps.LatLng(lastCoordinate.y, lastCoordinate.x));\n        }\n      }\n    }\n\n    return path;\n  };\n\n  static #validateGeometry = (geom) => {\n    if (geom instanceof jsts.geom.Polygon) {\n      if (geom.isValid()) {\n        return geom;\n      }\n\n      let polygonizer = new jsts.operation.polygonize.Polygonizer();\n\n      this.#addPolygon(geom, polygonizer);\n\n      return this.#toPolygonGeometry(polygonizer.getPolygons());\n    } else if (geom instanceof jsts.geom.MultiPolygon) {\n      if (geom.isValid()) {\n        return geom;\n      }\n\n      let polygonizer = new jsts.operation.polygonize.Polygonizer();\n\n      for (let n = geom.getNumGeometries(); n > 0; n--) {\n        this.#addPolygon(geom.getGeometryN(n - 1), polygonizer);\n      }\n\n      return this.#toPolygonGeometry(polygonizer.getPolygons());\n    } else {\n      return geom;\n    }\n  };\n\n  static #addPolygon = (polygon, polygonizer) => {\n    this.#addLineString(polygon.getExteriorRing(), polygonizer);\n\n    for (let n = polygon.getNumInteriorRing(); n > 0; n--) {\n      this.#addLineString(polygon.getInteriorRingN(n), polygonizer);\n    }\n  };\n\n  static #addLineString = (lineString, polygonizer) => {\n    if (lineString instanceof jsts.geom.LinearRing) {\n      lineString = lineString.getFactory().createLineString(lineString.getCoordinateSequence());\n    }\n\n    let point = lineString.getFactory().createPoint(lineString.getCoordinateN(0));\n    let toAdd = lineString.union(point);\n\n    polygonizer.add(toAdd);\n  };\n\n  static #toPolygonGeometry = (polygons) => {\n    switch (polygons.size()) {\n      case 0:\n        return null;\n      case 1:\n        return polygons.iterator().next();\n      default:\n        let iter = polygons.iterator();\n        let ret = iter.next();\n\n        while (iter.hasNext()) {\n          ret = ret.symDifference(iter.next());\n        }\n\n        return ret;\n    }\n  };\n}\n","import CustomOverlayView from './Overlays/CustomOverlayView';\nimport MapFunctions from './Map/MapHelper';\nimport JstsHelper from './Geometry/JstsHelper';\n\nexport default class MapDrawShapeManager {\n  /**\n   * @param {google.maps.Map} map Google Maps JavaScript API instance\n   * @param {Function} callback Callback function that will be called when user draws or clears the draw\n   * @param {boolean} drawingMode Flag indicating whether it should set Drawing Mode enabled\n   * @param {boolean} drawFreeHandMode Flag indicating whether it should set Draw Free Hand Mode enabled\n   * @param {object} polygonOptions Object containing the google polygon options to be used when drawing\n   * @param {string} initialPointInnerHtml String with the inner HTML of the draw initial point overlay\n   * @param {string} deletePointInnerHtml String with the inner HTML of the draw delete point overlay\n   */\n  constructor(\n    map,\n    callback,\n    drawingMode,\n    drawFreeHandMode,\n    polygonOptions,\n    initialPointInnerHtml,\n    deletePointInnerHtml,\n    onPlotCallback\n  ) {\n    this.map = map;\n\n    this.callback = callback;\n\n    this.drawFreeHandMode = drawFreeHandMode;\n\n    this.polygonOptions = polygonOptions;\n\n    this.initialPointInnerHtml = initialPointInnerHtml;\n    this.deletePointInnerHtml = deletePointInnerHtml;\n\n    this.initialDrawPoint = null;\n\n    this.startedDrawing = false;\n    this.startedDrawingFreeHand = false;\n\n    this.drawnPolylineDraft = null;\n    this.drawnPolygonDraft = null;\n\n    this.drawnShape = null;\n    this.deleteDrawnShape = null;\n    this.onPlotCallback = onPlotCallback;\n    this.setDrawingMode(drawingMode);\n  }\n\n  /**\n   * It draws a shape on the map using the provided shape\n   * @param {object[]} initialShape Array of objects that contain lat lng values\n   */\n  initDrawnShape = (initialShape) => {\n    if (initialShape?.length > 0 && !this.drawnShape) {\n      const polygons = JstsHelper.processShape(initialShape);\n\n      if (polygons.length > 0) {\n        this.drawnShape = [];\n\n        polygons.forEach((p) => {\n          this.drawnShape.push(\n            new google.maps.Polygon({ path: p, ...this.polygonOptions })\n          );\n        });\n\n        this.#setDeleteDrawPoint();\n      }\n    }\n  };\n\n  /**\n   * It resets the shape drawn on the map\n   */\n  resetDrawnShape = () => {\n    if (this.drawnShape) this.drawnShape.forEach((p) => p.setMap(null));\n    if (this.deleteDrawnShape) this.deleteDrawnShape.remove();\n\n    this.drawnShape = null;\n    this.deleteDrawnShape = null;\n  };\n\n  /**\n   * It sets the drawing mode to free hand, when enabled user should drag to draw instead of click\n   * @param {boolean} enabled Flag indicating whether it should set Draw Free Hand Mode enabled\n   */\n  setDrawFreeHandMode = (enabled) => {\n    if (!this.startedDrawing && !this.startedDrawingFreeHand) {\n      this.drawFreeHandMode = enabled;\n    }\n  };\n\n  /**\n   * It sets the map in drawing mode, when enabled user can star drawing\n   * @param {boolean} enabled Flag indicating whether it should set Drawing Mode enabled\n   */\n  setDrawingMode = (enabled) => {\n    if (enabled) {\n      if (this.drawnShape) this.drawnShape.forEach((p) => p.setMap(null));\n      if (this.deleteDrawnShape) this.deleteDrawnShape.remove();\n\n      if (this.drawFreeHandMode) {\n        this.#initDrawFreeHand();\n      } else {\n        this.#initDraw();\n      }\n    } else {\n      if (this.initialDrawPoint) this.initialDrawPoint.remove();\n      this.initialDrawPoint = null;\n\n      if (this.drawFreeHandMode) {\n        if (this.startedDrawingFreeHand) {\n          this.startedDrawingFreeHand = false;\n\n          MapFunctions.freezeMap(this.map, false);\n\n          if (this.drawnShape)\n            this.drawnShape.forEach((p) => p.setMap(this.map));\n          if (this.deleteDrawnShape) this.deleteDrawnShape.show(this.map);\n\n          this.#clearDrawFreeHandListeners();\n        }\n      } else {\n        if (this.startedDrawing) {\n          this.startedDrawing = false;\n\n          MapFunctions.enableCrossair(this.map, false);\n\n          if (this.drawnPolylineDraft) this.drawnPolylineDraft.setMap(null);\n          if (this.drawnPolygonDraft) this.drawnPolygonDraft.setMap(null);\n\n          this.drawnPolylineDraft = null;\n          this.drawnPolygonDraft = null;\n\n          if (this.drawnShape)\n            this.drawnShape.forEach((p) => p.setMap(this.map));\n          if (this.deleteDrawnShape) this.deleteDrawnShape.show(this.map);\n\n          this.#clearDrawListeners();\n        }\n      }\n    }\n  };\n\n  #setInitialDrawPoint = (point, callback) => {\n    this.initialDrawPoint = new CustomOverlayView(\n      this.initialPointInnerHtml,\n      point,\n      callback\n    );\n\n    this.initialDrawPoint.show(this.map);\n  };\n\n  #setDeleteDrawPoint = () => {\n    this.deleteDrawnShape = new CustomOverlayView(\n      this.deletePointInnerHtml,\n      this.#getDrawnShapeHighestPoint(),\n      () => {\n        if (this.drawnShape) this.drawnShape.forEach((p) => p.setMap(null));\n        if (this.deleteDrawnShape) this.deleteDrawnShape.remove();\n\n        this.drawnShape = null;\n        this.deleteDrawnShape = null;\n\n        this.callback([]);\n      }\n    );\n\n    if (!this.startedDrawing && !this.startedDrawingFreeHand) {\n      this.drawnShape.forEach((p) => p.setMap(this.map));\n      this.deleteDrawnShape.show(this.map);\n    }\n  };\n\n  #getDrawnShapeHighestPoint = () => {\n    let highestPoint = null;\n    let maxLat = 0;\n\n    this.drawnShape.forEach((polygon) => {\n      polygon\n        .getPath()\n        .getArray()\n        .forEach((point) => {\n          const lat = point.lat();\n\n          if (lat > maxLat) {\n            maxLat = lat;\n            highestPoint = point;\n          }\n        });\n    });\n\n    return highestPoint;\n  };\n\n  #initDraw = () => {\n    if (!this.startedDrawing) {\n      this.startedDrawing = true;\n\n      MapFunctions.enableCrossair(this.map, true);\n\n      this.#draw();\n    }\n  };\n\n  #draw = () => {\n    this.drawnPolylineDraft = new google.maps.Polyline({\n      map: this.map,\n      ...this.polygonOptions,\n    });\n    this.drawnPolygonDraft = new google.maps.Polygon({\n      map: this.map,\n      ...this.polygonOptions,\n      strokeOpacity: 0,\n    });\n\n    google.maps.event.addDomListener(this.map.getDiv(), 'click', (e) => {\n      const latLng = MapFunctions.pointToLatLng(this.map, e);\n\n      if (!this.initialDrawPoint) {\n        this.#setInitialDrawPoint(latLng, () => {\n          polylinePath.removeAt(polylinePath.length - 1);\n\n          this.#drawComplete();\n        });\n      }\n\n      const polylinePath = this.drawnPolylineDraft.getPath();\n\n      if (polylinePath.length > 0) {\n        polylinePath.removeAt(polylinePath.length - 1);\n      }\n\n      polylinePath.push(latLng);\n      polylinePath.push(latLng);\n\n      this.drawnPolygonDraft.setPath(polylinePath);\n      const lat = latLng.lat();\n      const lng = latLng.lng();\n      this.onPlotCallback({ lng, lat });\n    });\n\n    google.maps.event.addDomListener(this.map.getDiv(), 'mousemove', (e) => {\n      const polylinePath = this.drawnPolylineDraft.getPath();\n\n      if (polylinePath.length > 0) {\n        const latLng = MapFunctions.pointToLatLng(this.map, e);\n        polylinePath.setAt(polylinePath.length - 1, latLng);\n      }\n    });\n\n    google.maps.event.addListenerOnce(this.map, 'dblclick', () => {\n      setTimeout(() => {\n        this.#drawComplete();\n      }, 1);\n    });\n  };\n\n  #drawComplete = () => {\n    this.#clearDrawListeners();\n\n    this.startedDrawing = false;\n\n    MapFunctions.enableCrossair(this.map, false);\n\n    if (this.initialDrawPoint) this.initialDrawPoint.remove();\n    this.initialDrawPoint = null;\n\n    this.drawnPolylineDraft.setMap(null);\n    this.drawnPolygonDraft.setMap(null);\n\n    const polygons = JstsHelper.processPolygon(\n      this.drawnPolygonDraft.getPath().getArray()\n    );\n\n    if (polygons.length > 0) {\n      this.drawnShape = [];\n\n      let shape = [];\n\n      polygons.forEach((p) => {\n        this.drawnShape.push(\n          new google.maps.Polygon({ path: p, ...this.polygonOptions })\n        );\n\n        shape = shape.concat(\n          p.map((item) => {\n            return { lat: item.lat(), lng: item.lng() };\n          })\n        );\n      });\n\n      this.#setDeleteDrawPoint();\n\n      this.callback(shape);\n    } else {\n      this.#initDraw();\n    }\n  };\n\n  #clearDrawListeners = () => {\n    google.maps.event.clearListeners(this.map.getDiv(), 'click');\n    google.maps.event.clearListeners(this.map.getDiv(), 'mousemove');\n    google.maps.event.clearListeners(this.map, 'dblclick');\n  };\n\n  #initDrawFreeHand = () => {\n    if (!this.startedDrawingFreeHand) {\n      this.startedDrawingFreeHand = true;\n\n      MapFunctions.freezeMap(this.map, true);\n\n      this.#drawFreeHand();\n    }\n  };\n\n  #drawFreeHand = () => {\n    this.drawnPolylineDraft = new google.maps.Polyline({\n      map: this.map,\n      ...this.polygonOptions,\n    });\n\n    google.maps.event.addListenerOnce(this.map, 'mousedown', (e) => {\n      event.preventDefault(); // eslint-disable-line no-restricted-globals\n      event.stopPropagation(); // eslint-disable-line no-restricted-globals\n\n      if (!this.initialDrawPoint) {\n        this.#setInitialDrawPoint(e.latLng);\n      }\n\n      this.drawnPolylineDraft.getPath().push(e.latLng);\n\n      google.maps.event.addListener(this.map, 'mousemove', (e) => {\n        this.drawnPolylineDraft.getPath().push(e.latLng);\n      });\n\n      google.maps.event.addListenerOnce(this.map, 'mouseup', () => {\n        this.#drawFreeHandComplete();\n      });\n    });\n  };\n\n  #drawFreeHandComplete = () => {\n    this.#clearDrawFreeHandListeners();\n\n    this.startedDrawingFreeHand = false;\n\n    MapFunctions.freezeMap(this.map, false);\n\n    if (this.initialDrawPoint) this.initialDrawPoint.remove();\n    this.initialDrawPoint = null;\n\n    this.drawnPolylineDraft.setMap(null);\n\n    const polygons = JstsHelper.processPolygon(\n      this.drawnPolylineDraft.getPath().getArray(),\n      MapFunctions.getZoom(this.map)\n    );\n\n    if (polygons.length > 0) {\n      this.drawnShape = [];\n\n      let shape = [];\n\n      polygons.forEach((p) => {\n        this.drawnShape.push(\n          new google.maps.Polygon({ path: p, ...this.polygonOptions })\n        );\n\n        shape = shape.concat(\n          p.map((item) => {\n            return { lat: item.lat(), lng: item.lng() };\n          })\n        );\n      });\n\n      this.#setDeleteDrawPoint();\n\n      this.callback(shape);\n\n      this.onPlotCallback(shape);\n    } else {\n      this.#initDrawFreeHand();\n    }\n  };\n\n  #clearDrawFreeHandListeners = () => {\n    google.maps.event.clearListeners(this.map, 'mousedown');\n    google.maps.event.clearListeners(this.map, 'mousemove');\n    google.maps.event.clearListeners(this.map, 'mouseup');\n  };\n}\n"],"names":["CustomOverlayView","content","position","callback","onAdd","_this","div","document","createElement","style","cssText","innerHTML","google","maps","event","addDomListener","getPanes","floatPane","appendChild","onRemove","clearInstanceListeners","parentNode","removeChild","close","setMap","draw","projection","getProjection","point","fromLatLngToDivPixel","top","y","left","x","show","map","remove","extend","type1","type2","property","prototype","OverlayView","MapFunctions","getZoom","getBounds","bounds","ne","getNorthEast","sw","getSouthWest","nw","lat","lng","se","pointToLatLng","clientRect","getDiv","getBoundingClientRect","clientX","clientY","topRight","fromLatLngToPoint","bottomLeft","zoom","scale","Math","pow","fromPointToLatLng","Point","freezeMap","freeze","setOptions","draggable","scrollwheel","draggableCursor","disableDoubleClickZoom","enableCrossair","enable","JstsHelper","processShape","shape","validate","polygons","length","shapePolygons","polygon","firstCoordinate","i","push","jsts","Coordinate","LatLng","geometryFactory","GeometryFactory","jstsPolygons","item","shell","createLinearRing","createPolygon","jstsPolygon","createMultiPolygon","validPolygon","getCoordinates","processPolygon","path","simplifyZoom","coordinates","tolerance","TopologyPreservingSimplifier","simplify","geom","normalize","Polygon","MultiPolygon","n","getNumGeometries","getGeometryN","lastCoordinate","isValid","polygonizer","polygonize","Polygonizer","getPolygons","getExteriorRing","getNumInteriorRing","getInteriorRingN","lineString","LinearRing","getFactory","createLineString","getCoordinateSequence","createPoint","getCoordinateN","toAdd","union","add","size","iterator","next","iter","ret","hasNext","symDifference","drawingMode","drawFreeHandMode","polygonOptions","initialPointInnerHtml","deletePointInnerHtml","onPlotCallback","initDrawnShape","initialShape","drawnShape","forEach","p","resetDrawnShape","deleteDrawnShape","setDrawFreeHandMode","enabled","startedDrawing","startedDrawingFreeHand","setDrawingMode","initialDrawPoint","drawnPolylineDraft","drawnPolygonDraft","highestPoint","maxLat","getPath","getArray","Polyline","strokeOpacity","e","latLng","polylinePath","removeAt","setPath","setAt","addListenerOnce","setTimeout","concat","clearListeners","preventDefault","stopPropagation","addListener"],"mappings":"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"}